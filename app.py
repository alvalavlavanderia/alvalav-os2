import streamlit as st
import sqlite3
import pandas as pd

# -------------------------------
# CONFIGURA√á√ïES B√ÅSICAS
# -------------------------------
st.set_page_config(
    page_title="ALVALAV - Sistema de OS",
    page_icon="üß∫",
    layout="wide"
)

st.markdown("""
    <style>
        h1, h2, h3, h4 {
            color: #004aad;
        }
        .stButton>button {
            background-color: #004aad;
            color: white;
            border-radius: 8px;
            height: 40px;
        }
        .stButton>button:hover {
            background-color: #003580;
            color: #e6e6e6;
        }
    </style>
""", unsafe_allow_html=True)

# -------------------------------
# BANCO DE DADOS
# -------------------------------
conn = sqlite3.connect("alvalav_os.db")
c = conn.cursor()

def init_db():
    c.execute('''CREATE TABLE IF NOT EXISTS empresas (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    nome TEXT, cnpj TEXT, endereco TEXT, telefone TEXT)''')

    c.execute('''CREATE TABLE IF NOT EXISTS usuarios (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    usuario TEXT UNIQUE, senha TEXT, is_admin INTEGER DEFAULT 0)''')

    c.execute('''CREATE TABLE IF NOT EXISTS tipos_servico (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    descricao TEXT)''')

    c.execute('''CREATE TABLE IF NOT EXISTS ordens_servico (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    empresa TEXT, servico TEXT, descricao TEXT,
                    status TEXT DEFAULT 'Aberta')''')

    # Garante que o usu√°rio admin sempre exista
    c.execute("""
        INSERT OR IGNORE INTO usuarios (usuario, senha, is_admin)
        VALUES ('admin', 'Alv32324@', 1)
    """)
    conn.commit()

init_db()

# -------------------------------
# LOGIN
# -------------------------------
st.title("ALVALAV ‚Äî Sistema de Ordens de Servi√ßo")

if "usuario_logado" not in st.session_state:
    st.session_state.usuario_logado = None
    st.session_state.is_admin = False

if not st.session_state.usuario_logado:
    st.subheader("üîë Login")
    usuario = st.text_input("Usu√°rio")
    senha = st.text_input("Senha", type="password")
    if st.button("Entrar"):
        user = c.execute("SELECT * FROM usuarios WHERE usuario=? AND senha=?", (usuario, senha)).fetchone()
        if user:
            st.session_state.usuario_logado = user[1]
            st.session_state.is_admin = bool(user[3])
            st.success(f"‚úÖ Bem-vindo, {st.session_state.usuario_logado}!")
            st.experimental_rerun()
        else:
            st.error("‚ùå Usu√°rio ou senha inv√°lidos.")
    st.stop()

# -------------------------------
# MENU PRINCIPAL
# -------------------------------
menu_principal = st.selectbox("üìå Selecione o Menu", ["Cadastro", "Ordem de Servi√ßo"])

# -------------------------------
# CADASTROS
# -------------------------------
if menu_principal == "Cadastro":
    submenu = st.radio("Cadastros", ["Empresa", "Tipo de Servi√ßo"] + (["Usu√°rio"] if st.session_state.is_admin else []))

    if submenu == "Empresa":
        st.subheader("üè¢ Cadastro de Empresa")
        nome = st.text_input("Nome da empresa")
        cnpj = st.text_input("CNPJ")
        endereco = st.text_input("Endere√ßo")
        telefone = st.text_input("Telefone")
        if st.button("Salvar Empresa"):
            c.execute("INSERT INTO empresas (nome, cnpj, endereco, telefone) VALUES (?,?,?,?)",
                      (nome, cnpj, endereco, telefone))
            conn.commit()
            st.success("‚úÖ Empresa cadastrada com sucesso!")

    elif submenu == "Tipo de Servi√ßo":
        st.subheader("‚öôÔ∏è Cadastro de Tipo de Servi√ßo")
        descricao = st.text_input("Descri√ß√£o do servi√ßo")
        if st.button("Salvar Servi√ßo"):
            c.execute("INSERT INTO tipos_servico (descricao) VALUES (?)", (descricao,))
            conn.commit()
            st.success("‚úÖ Tipo de servi√ßo cadastrado com sucesso!")

    elif submenu == "Usu√°rio":
        st.subheader("üë§ Cadastro de Usu√°rio (apenas admin)")
        usuario = st.text_input("Usu√°rio")
        senha = st.text_input("Senha", type="password")
        if st.button("Salvar Usu√°rio"):
            try:
                c.execute("INSERT INTO usuarios (usuario, senha, is_admin) VALUES (?,?,0)", (usuario, senha))
                conn.commit()
                st.success("‚úÖ Usu√°rio cadastrado com sucesso!")
            except sqlite3.IntegrityError:
                st.error("‚ö†Ô∏è Esse usu√°rio j√° existe!")

# -------------------------------
# ORDEM DE SERVI√áO
# -------------------------------
elif menu_principal == "Ordem de Servi√ßo":
    submenu = st.radio("Ordem de Servi√ßo", ["Abrir OS", "Consultar OS"])

    if submenu == "Abrir OS":
        st.subheader("üìù Abrir Ordem de Servi√ßo")
        empresas = [row[0] for row in c.execute("SELECT nome FROM empresas").fetchall()]
        servicos = [row[0] for row in c.execute("SELECT descricao FROM tipos_servico").fetchall()]

        empresa = st.selectbox("Selecione a empresa", empresas if empresas else ["Nenhuma empresa cadastrada"])
        servico = st.selectbox("Selecione o servi√ßo", servicos if servicos else ["Nenhum servi√ßo cadastrado"])
        descricao = st.text_area("Descri√ß√£o da OS")

        if st.button("Abrir OS"):
            c.execute("INSERT INTO ordens_servico (empresa, servico, descricao, status) VALUES (?,?,?,?)",
                      (empresa, servico, descricao, "Aberta"))
            conn.commit()
            st.success("‚úÖ Ordem de Servi√ßo criada com sucesso!")

    elif submenu == "Consultar OS":
        st.subheader("üîç Consultar Ordens de Servi√ßo")

        # Sempre mostra pendentes primeiro
        st.write("üìå **OS Pendentes:**")
        pendentes = c.execute("SELECT * FROM ordens_servico WHERE status!='Conclu√≠da'").fetchall()
        if pendentes:
            df_pend = pd.DataFrame(pendentes, columns=["ID", "Empresa", "Servi√ßo", "Descri√ß√£o", "Status"])
            df_pend["Situa√ß√£o"] = df_pend["Status"].apply(lambda x: "Pendente" if x != "Conclu√≠da" else "Finalizada")
            st.dataframe(df_pend)

        st.write("---")
        opcao_consulta = st.radio("Consultar por:", ["Todas", "Empresa", "C√≥digo da OS"])

        if opcao_consulta == "Todas":
            ordens = c.execute("SELECT * FROM ordens_servico").fetchall()
        elif opcao_consulta == "Empresa":
            empresas = [row[0] for row in c.execute("SELECT nome FROM empresas").fetchall()]
            empresa_filtro = st.selectbox("Selecione a empresa", empresas)
            ordens = c.execute("SELECT * FROM ordens_servico WHERE empresa=?", (empresa_filtro,)).fetchall()
        elif opcao_consulta == "C√≥digo da OS":
            codigo = st.number_input("Digite o c√≥digo da OS", min_value=1, step=1)
            ordens = c.execute("SELECT * FROM ordens_servico WHERE id=?", (codigo,)).fetchall()

        if ordens:
            df = pd.DataFrame(ordens, columns=["ID", "Empresa", "Servi√ßo", "Descri√ß√£o", "Status"])
            df["Situa√ß√£o"] = df["Status"].apply(lambda x: "Pendente" if x != "Conclu√≠da" else "Finalizada")
            st.dataframe(df)

            # Exportar para Excel
            st.download_button(
                label="üì• Exportar para Excel",
                data=df.to_excel("ordens_servico.xlsx", index=False),
                file_name="ordens_servico.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )

            # Alterar status
            for ordem in ordens:
                st.markdown(f"### OS {ordem[0]} - {ordem[1]}")
                st.write(f"Servi√ßo: {ordem[2]} | Status atual: **{ordem[4]}**")
                novo_status = st.selectbox(
                    f"Alterar status da OS {ordem[0]}",
                    ["Aberta", "Em andamento", "Conclu√≠da"],
                    index=["Aberta", "Em andamento", "Conclu√≠da"].index(ordem[4]) if ordem[4] else 0,
                    key=f"status_{ordem[0]}"
                )
                if st.button(f"Salvar Status OS {ordem[0]}", key=f"btn_status_{ordem[0]}"):
                    c.execute("UPDATE ordens_servico SET status=? WHERE id=?", (novo_status, ordem[0]))
                    conn.commit()
                    st.success(f"‚úÖ Status da OS {ordem[0]} atualizado para {novo_status}")
                    st.experimental_rerun()
        else:
            st.info("Nenhuma OS encontrada com o filtro aplicado.")

